import csv
import argparse

from datetime import timedelta, datetime
from dateutil.parser import parse

from pytx import Malware
from pytx.vocabulary import Malware as MA

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-T", "--sample_type", help="The type of malware sample \
        for which to search")
    parser.add_argument("-H", "--share_level", help="The TLP Share Level \
        to match")
    parser.add_argument("-t", "--text", help="The text to match against")
    parser.add_argument("-s", "--status", help="The status (StatusType) \
        to match")
    parser.add_argument("-S", "--strict_text", help="Search results will \
        only match strict text (without wildcards)", action="store_true")
    parser.add_argument("-e", "--end_date", help="Search for samples \
        created up until a date (inclusive). The default is today's date. \
        Note that this date is converted to UTC time, so for example entering \
        1-27-16 would search until 1-27-16 00:00:00 UTC.",
        type=str, default=str(datetime.utcnow()))
    parser.add_argument("-d", "--days_back", help="Number of days prior to the \
        end_date from which results will be pulled.", type=int, default=1)
    return parser.parse_args()

def main():
    s = get_args()
    format_ = '%d-%m-%Y'
    for day_counter in range(s.days_back):
        # We use dateutil.parser.parse for its robustness in accepting different
        # datetime formats
        until_param = parse(s.end_date) - timedelta(days=day_counter)
        until_param_string = until_param.strftime(format_)

        since_param = until_param - timedelta(days=1)
        since_param_string = since_param.strftime(format_)

        output_file = 'malware_analyses_' + since_param_string + '_to_' + \
            until_param_string + '.csv'
        with open(output_file,'wb') as fout:
            writer = csv.writer(fout)
            # TODO: Add support for querying by SAMPLE_TYPE and SHARE_LEVEL
            # when that's added to pytx

            # TODO: Remove this once querying the fields related to a sample
            # Doesn't break TX, and fix all the things below

            fields =  [x for x in Malware._fields if (x != 'sample_size' and
                x!= 'sample_size_compressed' and x!='sample')]
            results = Malware.objects(
                fields=fields,
                limit=1000,
                text=s.text,
                status=s.status,
                strict_text=s.strict_text,
                since=since_param_string,
                until=until_param_string,
            )

            # Headers
            writer.writerow([
                "_ID", # Need leading underscore so we don't confuse Excel
                "ADDED_ON",
                "CRX",
                "IMPHASH",
                "MD5",
                "PASSWORD",
                "PE_RICH_HEADER",
                "SAMPLE_TYPE",
                "SHA1",
                "SHA256",
                "SHARE_LEVEL",
                "SSDEEP",
                "STATUS",
                "SUBMITTER_COUNT",
                "VICTIM_COUNT",
                "XPI",
            ])
            for r in results:
                writer.writerow(
                    map(
                        lambda x: x if type(x) == int else
                            (x.encode('utf-8') if x else ""),
                        [
                            r.get(MA.ID),
                            r.get(MA.ADDED_ON),
                            r.get(MA.CRX),
                            r.get(MA.IMPHASH),
                            r.get(MA.MD5),
                            r.get(MA.PASSWORD),
                            r.get(MA.PE_RICH_HEADER),
                            r.get(MA.SAMPLE_TYPE),
                            r.get(MA.SHA1),
                            r.get(MA.SHA256),
                            r.get(MA.SHARE_LEVEL),
                            r.get(MA.SSDEEP),
                            r.get(MA.STATUS),
                            r.get(MA.SUBMITTER_COUNT),
                            r.get(MA.VICTIM_COUNT),
                            r.get(MA.XPI),
                        ]
                    )
                )

if __name__ == "__main__":
    main()
